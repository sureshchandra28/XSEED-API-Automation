{
	"info": {
		"_postman_id": "87fd8ae5-336e-4841-842f-dc2261753d26",
		"name": "SearchALessonPlan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login CES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"cesToken\", jsonData.token);\r",
									"const responseJSON=pm.response.json();\r",
									"\r",
									"pm.test(\"Verifying Login\",()=>{\r",
									"    pm.expect(responseJSON.message).to.eql(\"Logged in\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "user_platform",
								"value": "web",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"kaushik.sundar+automator@xseededucation.com\",\r\n\"password\":\"xseed123\",\r\n\"referrer\":\"library.xseeddigital.info\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{loginURL}}",
							"host": [
								"{{loginURL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lib",
			"item": [
				{
					"name": "Search A Standard Lesson Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Id\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].id).to.eql(pm.environment.get(\"createdLpId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].name).to.eql(pm.environment.get(\"lpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Description\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].description).to.eql(pm.environment.get(\"desc\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Type\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].type).to.eql(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Block Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].blockName).to.eql(pm.environment.get(\"stAlBlockTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query lessonPlans($offset: Int!, $limit: Int!, $filter: lessonPlanFilterInputType) {\r\n  lessonPlans(offset: $offset, limit: $limit, filter: $filter) {\r\n    count\r\n    lessonPlans {\r\n      id\r\n      name\r\n      description\r\n      type\r\n      blockName\r\n      bId\r\n      grade\r\n      product\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"offset\": 0,\r\n  \"limit\": 100,\r\n  \"filter\": {\r\n    \"name\": \"{{lpName}}\",\r\n    \"allowedTypes\": [\r\n      \"standard\",\r\n      \"magic\",\r\n      \"mental_math\",\r\n      \"foundation_5a\",\r\n      \"information_and_assessment\",\r\n      \"discussion\",\r\n      \"practice\"\r\n    ]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A First Lesson Plan from Multiple Lesson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Id\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].id).to.eql(pm.environment.get(\"createdLpIdForIA\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].name).to.eql(pm.environment.get(\"firstLpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Description\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].description).to.eql(pm.environment.get(\"firstDesc\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Type\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].type).to.eql(\"information_and_assessment\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Block Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].blockName).to.eql(pm.environment.get(\"mFirstBlockTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query lessonPlans($offset: Int!, $limit: Int!, $filter: lessonPlanFilterInputType) {\r\n  lessonPlans(offset: $offset, limit: $limit, filter: $filter) {\r\n    count\r\n    lessonPlans {\r\n      id\r\n      name\r\n      description\r\n      type\r\n      blockName\r\n      bId\r\n      grade\r\n      product\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"offset\": 0,\r\n  \"limit\": 100,\r\n  \"filter\": {\r\n    \"name\": \"{{firstLpName}}\",\r\n    \"allowedTypes\": [\r\n      \"standard\",\r\n      \"magic\",\r\n      \"mental_math\",\r\n      \"foundation_5a\",\r\n      \"information_and_assessment\",\r\n      \"discussion\",\r\n      \"practice\"\r\n    ]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A Second Lesson Plan from Multiple Lesson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Id\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].id).to.eql(pm.environment.get(\"createdLpIdForStand\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].name).to.eql(pm.environment.get(\"secondLpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Description\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].description).to.eql(pm.environment.get(\"secondDesc\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Type\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].type).to.eql(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Block Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].blockName).to.eql(pm.environment.get(\"mFirstBlockTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query lessonPlans($offset: Int!, $limit: Int!, $filter: lessonPlanFilterInputType) {\r\n  lessonPlans(offset: $offset, limit: $limit, filter: $filter) {\r\n    count\r\n    lessonPlans {\r\n      id\r\n      name\r\n      description\r\n      type\r\n      blockName\r\n      bId\r\n      grade\r\n      product\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"offset\": 0,\r\n  \"limit\": 100,\r\n  \"filter\": {\r\n    \"name\": \"{{secondLpName}}\",\r\n    \"allowedTypes\": [\r\n      \"standard\",\r\n      \"magic\",\r\n      \"mental_math\",\r\n      \"foundation_5a\",\r\n      \"information_and_assessment\",\r\n      \"discussion\",\r\n      \"practice\"\r\n    ]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A Lesson Plan from Validate A Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Id\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].id).to.eql(pm.environment.get(\"vCreatedLpId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].name).to.eql(pm.environment.get(\"vIALpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Description\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].description).to.eql(pm.environment.get(\"vIALpDesc\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Type\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].type).to.eql(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Block Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].blockName).to.eql(pm.environment.get(\"vBlockTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query lessonPlans($offset: Int!, $limit: Int!, $filter: lessonPlanFilterInputType) {\r\n  lessonPlans(offset: $offset, limit: $limit, filter: $filter) {\r\n    count\r\n    lessonPlans {\r\n      id\r\n      name\r\n      description\r\n      type\r\n      blockName\r\n      bId\r\n      grade\r\n      product\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"offset\": 0,\r\n  \"limit\": 100,\r\n  \"filter\": {\r\n    \"name\": \"{{vIALpName}}\",\r\n    \"allowedTypes\": [\r\n      \"standard\",\r\n      \"magic\",\r\n      \"mental_math\",\r\n      \"foundation_5a\",\r\n      \"information_and_assessment\",\r\n      \"discussion\",\r\n      \"practice\"\r\n    ]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A Lesson Plan from Journey A Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Id\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].id).to.eql(pm.environment.get(\"jCreatedLpId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].name).to.eql(pm.environment.get(\"jLpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Description\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].description).to.eql(pm.environment.get(\"jLpDesc\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Lesson Plan Type\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].type).to.eql(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Block Name\",()=>{\r",
									"    pm.expect(jsonData.data.lessonPlans.lessonPlans[0].blockName).to.eql(pm.environment.get(\"jBlockTitle\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query lessonPlans($offset: Int!, $limit: Int!, $filter: lessonPlanFilterInputType) {\r\n  lessonPlans(offset: $offset, limit: $limit, filter: $filter) {\r\n    count\r\n    lessonPlans {\r\n      id\r\n      name\r\n      description\r\n      type\r\n      blockName\r\n      bId\r\n      grade\r\n      product\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"offset\": 0,\r\n  \"limit\": 100,\r\n  \"filter\": {\r\n    \"name\": \"{{jLpName}}\",\r\n    \"allowedTypes\": [\r\n      \"standard\",\r\n      \"magic\",\r\n      \"mental_math\",\r\n      \"foundation_5a\",\r\n      \"information_and_assessment\",\r\n      \"discussion\",\r\n      \"practice\"\r\n    ]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchAStandardProjectName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Project Name\",()=>{\r",
									"   pm.expect(jsonData.data.multipleProjects.projects[0].name).to.eql(pm.environment.get(\"createdProjectName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  multipleProjects(filters: {page: 0, limit: 50, isMyProjects: false, searchKey: \"{{createdProjectName}}\"}) {\r\n    totalCount\r\n    projects {\r\n      id\r\n      name\r\n      workflowStatus\r\n      product {\r\n        id\r\n        name\r\n      }\r\n      board {\r\n        id\r\n        name\r\n      }\r\n      standard {\r\n        id\r\n        name\r\n        displayName\r\n      }\r\n      subject {\r\n        id\r\n        name\r\n        shortName\r\n      }\r\n      block {\r\n        id\r\n        bId\r\n        title\r\n        childrenType\r\n      }\r\n      contents {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n        template\r\n      }\r\n      dailyPlans {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n      }\r\n      assignees {\r\n        author {\r\n          id\r\n          name\r\n        }\r\n        reviewer1 {\r\n          id\r\n          name\r\n        }\r\n        reviewer2 {\r\n          id\r\n          name\r\n        }\r\n        academicSignOff {\r\n          id\r\n          name\r\n        }\r\n        editor {\r\n          id\r\n          name\r\n        }\r\n        visualizer {\r\n          id\r\n          name\r\n        }\r\n        assetUploader {\r\n          id\r\n          name\r\n        }\r\n        assetAuthorizer {\r\n          id\r\n          name\r\n        }\r\n        proofReader {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A First Project From Multiple Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Project Name\",()=>{\r",
									"   pm.expect(jsonData.data.multipleProjects.projects[0].name).to.eql(pm.environment.get(\"firstProjectName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  multipleProjects(filters: {page: 0, limit: 50, isMyProjects: false, searchKey: \"{{firstProjectName}}\"}) {\r\n    totalCount\r\n    projects {\r\n      id\r\n      name\r\n      workflowStatus\r\n      product {\r\n        id\r\n        name\r\n      }\r\n      board {\r\n        id\r\n        name\r\n      }\r\n      standard {\r\n        id\r\n        name\r\n        displayName\r\n      }\r\n      subject {\r\n        id\r\n        name\r\n        shortName\r\n      }\r\n      block {\r\n        id\r\n        bId\r\n        title\r\n        childrenType\r\n      }\r\n      contents {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n        template\r\n      }\r\n      dailyPlans {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n      }\r\n      assignees {\r\n        author {\r\n          id\r\n          name\r\n        }\r\n        reviewer1 {\r\n          id\r\n          name\r\n        }\r\n        reviewer2 {\r\n          id\r\n          name\r\n        }\r\n        academicSignOff {\r\n          id\r\n          name\r\n        }\r\n        editor {\r\n          id\r\n          name\r\n        }\r\n        visualizer {\r\n          id\r\n          name\r\n        }\r\n        assetUploader {\r\n          id\r\n          name\r\n        }\r\n        assetAuthorizer {\r\n          id\r\n          name\r\n        }\r\n        proofReader {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A Second Project From Multiple projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Project Name\",()=>{\r",
									"   pm.expect(jsonData.data.multipleProjects.projects[0].name).to.eql(pm.environment.get(\"secondProjectName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  multipleProjects(filters: {page: 0, limit: 50, isMyProjects: false, searchKey: \"{{secondProjectName}}\"}) {\r\n    totalCount\r\n    projects {\r\n      id\r\n      name\r\n      workflowStatus\r\n      product {\r\n        id\r\n        name\r\n      }\r\n      board {\r\n        id\r\n        name\r\n      }\r\n      standard {\r\n        id\r\n        name\r\n        displayName\r\n      }\r\n      subject {\r\n        id\r\n        name\r\n        shortName\r\n      }\r\n      block {\r\n        id\r\n        bId\r\n        title\r\n        childrenType\r\n      }\r\n      contents {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n        template\r\n      }\r\n      dailyPlans {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n      }\r\n      assignees {\r\n        author {\r\n          id\r\n          name\r\n        }\r\n        reviewer1 {\r\n          id\r\n          name\r\n        }\r\n        reviewer2 {\r\n          id\r\n          name\r\n        }\r\n        academicSignOff {\r\n          id\r\n          name\r\n        }\r\n        editor {\r\n          id\r\n          name\r\n        }\r\n        visualizer {\r\n          id\r\n          name\r\n        }\r\n        assetUploader {\r\n          id\r\n          name\r\n        }\r\n        assetAuthorizer {\r\n          id\r\n          name\r\n        }\r\n        proofReader {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search A Project From Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"Verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Project Name\",()=>{\r",
									"   pm.expect(jsonData.data.multipleProjects.projects[0].name).to.eql(pm.environment.get(\"vProjectName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  multipleProjects(filters: {page: 0, limit: 50, isMyProjects: false, searchKey: \"{{vProjectName}}\"}) {\r\n    totalCount\r\n    projects {\r\n      id\r\n      name\r\n      workflowStatus\r\n      product {\r\n        id\r\n        name\r\n      }\r\n      board {\r\n        id\r\n        name\r\n      }\r\n      standard {\r\n        id\r\n        name\r\n        displayName\r\n      }\r\n      subject {\r\n        id\r\n        name\r\n        shortName\r\n      }\r\n      block {\r\n        id\r\n        bId\r\n        title\r\n        childrenType\r\n      }\r\n      contents {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n        template\r\n      }\r\n      dailyPlans {\r\n        library_id\r\n        name\r\n        currentStage\r\n        type\r\n      }\r\n      assignees {\r\n        author {\r\n          id\r\n          name\r\n        }\r\n        reviewer1 {\r\n          id\r\n          name\r\n        }\r\n        reviewer2 {\r\n          id\r\n          name\r\n        }\r\n        academicSignOff {\r\n          id\r\n          name\r\n        }\r\n        editor {\r\n          id\r\n          name\r\n        }\r\n        visualizer {\r\n          id\r\n          name\r\n        }\r\n        assetUploader {\r\n          id\r\n          name\r\n        }\r\n        assetAuthorizer {\r\n          id\r\n          name\r\n        }\r\n        proofReader {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{apiHost}}",
							"host": [
								"{{apiHost}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}